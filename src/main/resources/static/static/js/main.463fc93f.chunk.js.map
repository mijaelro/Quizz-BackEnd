{"version":3,"sources":["reportWebVitals.ts","Components/HeaderArea/Header/Header.tsx","Components/SharedArea/About/About.tsx","Components/MainArea/Levels/Level/Level.tsx","Components/MainArea/Home/Home.tsx","Redux/QuestionsState.ts","Redux/store.ts","Services/globals.tsx","Components/SharedArea/EmptyView/EmptyView.tsx","Components/Utils/ShuffleArrayUtil.tsx","Components/MainArea/QuestionCard/QuestionsCard.styles.ts","Components/MainArea/QuestionCard/QuestionsCard.tsx","Components/MainArea/Play/Easy/Easy.tsx","Components/MainArea/Play/Hard/Hard.tsx","Components/MainArea/Play/Medium/Medium.tsx","Components/MainArea/QuestionsLinks/QuestionsLinks.tsx","Services/Notification.ts","Components/MainArea/SendIdeas/SendIdeas.tsx","Components/MainArea/Routing/Routing.tsx","Components/Layout/Layout.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Header","id","className","activeClassName","to","About","history","useHistory","onClick","push","href","target","rel","Level","Home","QuestionsActionType","QuestionsState","questions","QuestionsDownloadedAction","type","QuestionsDownloaded","payload","reducers","combineReducers","questionsState","currentState","action","newState","QuestionAdded","QuestionUpdated","idx","findIndex","c","QuestionDeleted","filter","store","createStore","Globals","ProductionGlobals","urls","globals","EmptyView","props","msg","alt","src","shuffleArray","array","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","questionNr","totalQuestions","question","answers","map","answer","userAnswer","correctAnswer","disabled","value","callback","dangerouslySetInnerHTML","__html","Easy","useState","getState","setQuestions","loading","setLoading","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","finalScore","setFinalScore","fetchQuestionsEasy","a","axios","get","response","dispatch","data","nextQuestion","nextQ","undefined","options","e","currentTarget","prev","answerObject","length","TOTAL_QUESTIONS","Hard","fetchQuestionsHard","Medium","fetchQuestionsMedium","QuestionsLinks","notify","notification","Notyf","duration","position","x","y","message","this","success","SendIdeas","useForm","register","errors","handleSubmit","formState","onSubmit","emailjs","sendForm","result","console","log","text","error","reset","placeholder","name","required","minLength","email","subject","cols","rows","Routing","path","component","exact","from","Layout","bg","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.463fc93f.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { NavLink } from \"react-router-dom\";\nimport \"./Header.css\";\n\nfunction Header(): JSX.Element {\n    return (\n        <header >\n          <nav id=\"nav-wrap\">\n            <ul id=\"nav\" className=\"nav\">\n              \n              <li className=\"current\">\n                <NavLink activeClassName=\"active\" to=\"/home\" className=\"smoothscroll\">\n                  Home\n                </NavLink>\n              </li>\n\n              <li className=\"current\">\n                <NavLink activeClassName=\"active\" to=\"/level\" className=\"smoothscroll\" >\n                  Play\n                </NavLink>\n              </li>\n\n              <li className=\"current\">\n                <NavLink activeClassName=\"active\" to=\"/questions\" className=\"smoothscroll\">\n                Questions\n                </NavLink>\n              </li>\n\n              <li className=\"current\">\n                <NavLink activeClassName=\"active\" to=\"/about\" className=\"smoothscroll\">\n                About\n                </NavLink>\n              </li>\n\n            </ul>\n          </nav>\n      </header>\n    );\n}\n\nexport default Header;\n","import { useHistory } from \"react-router\";\nimport \"./About.css\";\n\nfunction About(): JSX.Element {\n    const history = useHistory();\n    return ( \n        <div className=\"About\">\n\t\t\t<h1 id=\"niceTitle\">About</h1>\n            <p>This page contains more than 100 questions overall  with the following categories: <br/> <span id=\"categ\"> Java , Spring , React , Web <span/></span><br/><br/>\n                just chose a level and start playing , levels are: <br/> <span id=\"categ\"> Easy=25 questions ,Medium = 60 questions\n                , Hard = 100 questions</span> <br/><br/>\n                <span id=\"note\">note:</span><span>doesn't matter which level you choose the questions get shuffled , meaning that you will get different questions in each test.</span>\n              \n\n            </p>\n            <h4>If you have any ideas i invite you to send them to me in the following link</h4>\n            <button className=\"myButton4\" onClick={()=>history.push(\"/sendIdeas\")}> Send Ideas</button>\n            <h5>this page was made by <a href=\"https://www.linkedin.com/in/mijael-rofe-42a264180/\" target=\"_blank\" rel=\"noreferrer\">Mijael Rofe</a></h5>\n        </div>\n    );\n}\n\nexport default About;\n","import {  useHistory } from \"react-router-dom\";\nimport \"./Level.css\";\n\nfunction Level(): JSX.Element {\n\n    const history = useHistory();\n    return (\n        <div className=\"Level\">\n            \n          <h1 id=\"niceTitle\">Choose your level</h1>\n\n\t\t\t<div className=\"flex-container\">\n                <div className=\"flex-item\"> <button className=\"myButton\" onClick={()=>history.push(\"/easy\")}>Easy</button></div>\n                <div className=\"flex-item\"><button className=\"myButton2\" onClick={()=>history.push(\"/medium\")}>Medium</button></div>\n                <div className=\"flex-item\">  <button className=\"myButton3\" onClick={()=>history.push(\"/hard\")}>Hard</button> </div>\n            </div>\n\n        </div>\n    );\n}\n\nexport default Level;\n","import { useHistory } from \"react-router\";\nimport \"./Home.css\";\n\nfunction Home(): JSX.Element {\n\n  const history= useHistory();\n\n    return (\n        <div className=\"Home\">\n         \n          <h1 className=\"responsive-headline\">Mi-Quizz</h1>\n         \n            <div className=\"infoo\">            \n                <h3>This is a quizz app for junior Java fullstack developers to get ready for Jo interview questions.  </h3>\n                <span id=\"click\">Click bellow to start playing!</span>\n            </div>\n            \n            <div className=\"infooPlay\">\n                <button className=\"myButton\" onClick={()=>history.push(\"/level\")}>Start</button>\n            </div>\n       \n        </div>\n    );\n}\n\nexport default Home;\n","import QuestionModel from \"../Models/QuestionModel\";\n\nexport class QuestionsState {\n    public questions: QuestionModel[] = [];\n};\n\nexport enum QuestionsActionType {\n    QuestionsDownloaded= \"QuestionsDownloaded\",\n    QuestionAdded = \"QuestionAdded\",\n    QuestionUpdated = \"QuestionUpdated\",\n    QuestionDeleted = \"QuestionDeleted\",\n};\n\nexport interface QuestionAction {\n    type: QuestionsActionType;\n    payload?: any;\n};\n\nexport function QuestionsDownloadedAction(questions: QuestionModel[]): QuestionAction {\n    return { type: QuestionsActionType.QuestionsDownloaded, payload: questions };\n};\n\nexport function QuestionAddedAction(question: QuestionModel): QuestionAction {\n    return { type: QuestionsActionType.QuestionAdded, payload: question };\n};\n\nexport function QuestionUpdatedAction(question: QuestionModel): QuestionAction {\n    return { type: QuestionsActionType.QuestionUpdated, payload: question };\n};\n\nexport function QuestionDeletedAction(id:number): QuestionAction {\n    return { type: QuestionsActionType.QuestionDeleted, payload: id };\n};\n\nexport function questionsReducer(currentState: QuestionsState = new QuestionsState(),action:QuestionAction): QuestionsState{\n    \n    const newState = {...currentState}; \n    \n    switch (action.type) {\n        case QuestionsActionType.QuestionsDownloaded:\n            newState.questions = action.payload;\n            break;\n        case QuestionsActionType.QuestionAdded:\n            newState.questions.push(action.payload);\n            break;\n\n        case QuestionsActionType.QuestionUpdated:\n\n            const idx = newState.questions.findIndex(c => c.id === action.payload.id);\n            newState.questions[idx] = action.payload;\n            break;\n\n        case QuestionsActionType.QuestionDeleted:\n            newState.questions = newState.questions.filter(c=>c.id !== action.payload);\n            break;\n            \n    };\n\n    return newState;\n};","import { combineReducers, createStore } from \"redux\";\nimport { questionsReducer } from \"./QuestionsState\";\n\n\nconst reducers = combineReducers({\n\n    questionsState: questionsReducer,\n   \n });\nconst store = createStore(reducers);\n\n\nexport default store;\n","class Globals{\n};\nclass DevelopmentGlobals extends Globals{\n    public urls = {\n        questions:\"http://localhost:8080/questions/\",     \n    };\n};\n\nclass ProductionGlobals extends Globals{\n    public urls = {\n        questions:\"/questions/\",     \n    };\n};\n\nconst globals = process.env.NODE_ENV === 'production' ? new ProductionGlobals() : new DevelopmentGlobals();\n\nexport default globals;","import \"./EmptyView.css\";\n\ninterface EmptyViewProps {\n\tmsg: string;\n};\n\nconst EmptyView=(props: EmptyViewProps): JSX.Element=> {\n    return (\n        <div className=\"EmptyView\">\n            <h2 id=\"niceTitle2\">{props.msg}</h2>\n\t\t\t<img alt =\"empty view\"src=\"https://media2.giphy.com/media/swhRkVYLJDrCE/giphy.gif?cid=ecf05e47zh9njc4uohd1gua33op3p61n33ba5l309hwbdioo&rid=giphy.gif&ct=g\"/>\n        </div>\n    );\n};\n\nexport default EmptyView;","export const shuffleArray = (array: any[]) =>\n  [...array].sort(() => Math.random() - 0.5);","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  max-width: 1100px;\n  background: #7d40b5bf;\n  border-radius: 10px;\n  border: 2px solid #5cbf2a;\n  padding: 20px;\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n  text-align: center;\n  p {\n    font-size: 1rem;\n  }\n`;\n\ntype ButtonWrapperProps = {\n  correct: boolean;\n  userClicked: boolean;\n};\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n  transition: all 0.3s ease;\n  :hover {\n    opacity: 0.4;\n  }\n  button {\n    cursor: pointer;\n    user-select: none;\n    font-size: 0.8rem;\n    width: 100%;\n    height: 40px;\n    margin: 5px 0;\n    background: ${({ correct, userClicked }) =>\n      correct\n        ? 'linear-gradient(90deg, #56FFA4, #59BC86)'\n        : !correct && userClicked\n        ? 'linear-gradient(90deg, #FF5656, #C16868)'\n        : '#d48cffc7'};\n    border: 3px solid  #45084d;\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\n    border-radius: 10px;\n    color: black;\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\n  }\n`;","import { Wrapper, ButtonWrapper }  from \"./QuestionsCard.styles\";\nimport {AnswerObject} from '../Play/Easy/Easy'\n\ninterface QuestionProps {\nquestion:string;\ncallback:(e: React.MouseEvent<HTMLButtonElement>) => void;\nuserAnswer: AnswerObject | undefined;\nquestionNr: number;\ntotalQuestions: number;\nanswers:string[],\n\n}\n\nconst QuestionCard = (props:QuestionProps): JSX.Element =>(\n    \n        <Wrapper>\n\n            <p className=\"number\">\n                Question: {props.questionNr}/{props.totalQuestions}\n            </p>\n\n            <p className=\"question\">{ props.question }</p>\n\n            <div>\n                 {props.answers?.map((answer) => (\n                    <ButtonWrapper\n                      key={answer}\n                      correct={props.userAnswer?.correctAnswer === answer}\n                      userClicked={props.userAnswer?.answer === answer}\n                    >\n                        <button disabled={props.userAnswer ? true : false} value={answer} onClick={props.callback}>\n                          <span dangerouslySetInnerHTML={{ __html: answer }} />\n                        </button>\n\n                    </ButtonWrapper>\n                  ))}\n            </div>\n\n        </Wrapper>\n);\n\nexport default QuestionCard;\n","import axios from \"axios\";\nimport { useState } from \"react\";\nimport { QuestionsDownloadedAction } from \"../../../../Redux/QuestionsState\";\nimport store from \"../../../../Redux/store\";\nimport globals from \"../../../../Services/globals\";\nimport EmptyView from \"../../../SharedArea/EmptyView/EmptyView\";\nimport {shuffleArray} from '../../../Utils/ShuffleArrayUtil'\nimport QuestionCard from \"../../QuestionCard/QuestionsCard\";\nimport QuestionModel from \"../../../../Models/QuestionModel\";\nimport \"./Easy.css\";\n\nexport type AnswerObject = {\n    question: string;\n    answer: string;\n    correct: boolean;\n    correctAnswer: string;\n};\n\n  const TOTAL_QUESTIONS = 25; \n\nfunction Easy(): JSX.Element {\n    const[questions,setQuestions] = useState(store.getState().questionsState.questions);\n    const [loading, setLoading] = useState(false);\n    const [number, setNumber] = useState(0);\n    const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n    const [score, setScore] = useState(0);\n    const [gameOver, setGameOver] = useState(true);\n    const[finalScore,setFinalScore] = useState(0);\n\n    const fetchQuestionsEasy = async()=>{\n        setLoading(true);\n        setGameOver(false);\n            const response = await axios.get<QuestionModel[]>(globals.urls.questions+\"q/e\");\n            store.dispatch(QuestionsDownloadedAction(response.data));\n            setQuestions(shuffleArray(response.data));\n            setScore(0);\n            setFinalScore(0);\n            setUserAnswers([]);\n            setNumber(0);\n            setLoading(false);\n    };\n\n  const checkAnswer=(e:any)=>{\n      if (!gameOver) {\n          const answer = e.currentTarget.value;\n          const correct = questions[number]?.answer === answer;\n          if (correct) setScore((prev) => prev + 1);\n          \n          const answerObject = {\n            question: questions[number]?.question,\n            answer,\n            correct,\n            correctAnswer: questions[number]?.answer,\n          };\n          setUserAnswers((prev) => [...prev, answerObject]);\n        }\n  };\n\n\n  const nextQuestion=()=>{\n  const nextQ = number+1;\n\n      if (nextQ === TOTAL_QUESTIONS) {\n        setGameOver(true);\n        setFinalScore(score);\n\n      } else {\n        setNumber(nextQ);\n      }\n  }\n\n\n    return (\n        <div className =\"Easy\">\n          <div className=\"Wrapper\">\n            {gameOver &&finalScore===0 ? (\n             <>\n             <h1>FULLSTACK QUIZ</h1>\n             <span id=\"span1\">(Easy-25)</span>\n             <span id=\"span11\">click play to get started!</span>\n              <button className='myButton start' onClick={fetchQuestionsEasy}>\n              ▶\n              </button>\n             </>\n            ) : null}\n      \n        {gameOver&&finalScore!==0&&(\n        <>\n        <div className=\"bluring\"><span id=\"finalScore\">Your final is score is <br /><span id=\"reddish\">{score}/25</span>  <br /> Try again!</span></div>\n          <button className='myButton start' onClick={fetchQuestionsEasy}>\n           retry\n          </button>\n        </>\n        )}\n\n        {loading&&\n          <div>\n            <EmptyView msg=\"Loading questions..\"/>\n          </div>\n        }\n        \n        {!gameOver ? <p className='score'>Score: {score}</p> : null}\n        \n        {!loading && !gameOver && (\n\n                    <QuestionCard \n                      question={questions[number]?.question}\n                      userAnswer={userAnswers ? userAnswers[number] : undefined}\n                      questionNr={number+1} \n                      totalQuestions={TOTAL_QUESTIONS}\n                      answers={shuffleArray(questions[number]?.options)}\n                      callback={checkAnswer}/>\n                     )}    \n\n          {!gameOver && !loading && userAnswers.length === number +1 && number+1 !== TOTAL_QUESTIONS  ? (\n            <button className='next' onClick={nextQuestion}>\n              Next Question\n            </button>\n          ) :  !gameOver && !loading && number+1 == TOTAL_QUESTIONS \n          ? ( <button className='next' onClick={nextQuestion}>\n                  Finish\n              </button>\n            ):null\n          } \n      </div>\n    </div>\n    );\n}\n\nexport default Easy;\n","import axios from \"axios\";\nimport { useState } from \"react\";\nimport QuestionModel from \"../../../../Models/QuestionModel\";\nimport { QuestionsDownloadedAction } from \"../../../../Redux/QuestionsState\";\nimport store from \"../../../../Redux/store\";\nimport globals from \"../../../../Services/globals\";\nimport EmptyView from \"../../../SharedArea/EmptyView/EmptyView\";\nimport { shuffleArray } from \"../../../Utils/ShuffleArrayUtil\";\nimport QuestionCard from \"../../QuestionCard/QuestionsCard\";\nimport \"./Hard.css\";\n\nexport type AnswerObject = {\n    question: string;\n    answer: string;\n    correct: boolean;\n    correctAnswer: string;\n  };\n\n  const TOTAL_QUESTIONS = 100; \n\nfunction Hard(): JSX.Element {\n    const[questions,setQuestions] = useState(store.getState().questionsState.questions);\n    const [loading, setLoading] = useState(false);\n    const [number, setNumber] = useState(0);\n    const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n    const [score, setScore] = useState(0);\n    const [gameOver, setGameOver] = useState(true);\n    const[finalScore,setFinalScore] = useState(0);\n    \n    const fetchQuestionsHard = async()=>{\n        setLoading(true);\n        setGameOver(false);\n            const response = await axios.get<QuestionModel[]>(globals.urls.questions+\"q/h\");\n            store.dispatch(QuestionsDownloadedAction(response.data));\n            setQuestions(shuffleArray(response.data));\n            setScore(0);\n            setFinalScore(0);\n            setUserAnswers([]);\n            setNumber(0);\n            setLoading(false);\n    };\n\n  const checkAnswer=(e:any)=>{\n      if (!gameOver) {\n          const answer = e.currentTarget.value;\n          const correct = questions[number]?.answer === answer;\n          if (correct) setScore((prev) => prev + 1);\n\n          const answerObject = {\n            question: questions[number]?.question,\n            answer,\n            correct,\n            correctAnswer: questions[number]?.answer,\n          };\n          setUserAnswers((prev) => [...prev, answerObject]);\n        }\n  };\n\n\n  const nextQuestion=()=>{\n      const nextQ = number+1;\n\n        if (nextQ === TOTAL_QUESTIONS) {\n          setGameOver(true);\n          setFinalScore(score);  \n        } else {\n          setNumber(nextQ);\n        }\n  }\n\n\n    return (\n        <div className =\"Easy\">\n          <div className=\"Wrapper\">\n            {gameOver &&finalScore===0 ? (\n              <>\n              <h1>FULLSTACK QUIZ</h1>\n              <span id=\"span3\">(Hard-100)</span>\n              <span id=\"span11\">click play to get started!</span>\n                <button className='myButton start' onClick={fetchQuestionsHard}>\n                ▶\n                </button>\n              </>\n              ) : null}\n\n              {gameOver&&finalScore!==0&&(\n                <>\n                  <div className=\"bluring\"><span id=\"finalScore\">Your final is score is <br /><span id=\"reddish\">{score}/25</span>  <br /> Try again!</span></div>\n                  <button className='myButton start' onClick={fetchQuestionsHard}>\n                  retry\n                  </button>\n                </>\n              )}\n\n              {loading&&\n                <div>\n                  <EmptyView msg=\"Loading questions..\"/>\n                </div>\n              }\n\n              {!gameOver ? <p className='score'>Score: {score}</p> : null}\n              \n              {!loading && !gameOver && (\n\n                    <QuestionCard \n                      question={questions[number]?.question}\n                      userAnswer={userAnswers ? userAnswers[number] : undefined}\n                      questionNr={number+1} \n                      totalQuestions={TOTAL_QUESTIONS}\n                      answers={shuffleArray(questions[number]?.options)}\n                      callback={checkAnswer}/>\n                     )}      \n         \n         {!gameOver && !loading && userAnswers.length === number +1 && number+1 !== TOTAL_QUESTIONS  ? (\n            <button className='next' onClick={nextQuestion}>\n              Next Question\n            </button>\n          ) :  !gameOver && !loading && number+1 == TOTAL_QUESTIONS \n          ? ( <button className='next' onClick={nextQuestion}>\n                  Finish\n              </button>\n            ):null\n          } \n      </div>\n    </div>\n    );\n}\n\n\nexport default Hard;\n","import axios from \"axios\";\nimport { useState } from \"react\";\nimport QuestionModel from \"../../../../Models/QuestionModel\";\nimport { QuestionsDownloadedAction } from \"../../../../Redux/QuestionsState\";\nimport store from \"../../../../Redux/store\";\nimport globals from \"../../../../Services/globals\";\nimport EmptyView from \"../../../SharedArea/EmptyView/EmptyView\";\nimport { shuffleArray } from \"../../../Utils/ShuffleArrayUtil\";\nimport QuestionCard from \"../../QuestionCard/QuestionsCard\";\nimport \"./Medium.css\";\n\nexport type AnswerObject = {\n    question: string;\n    answer: string;\n    correct: boolean;\n    correctAnswer: string;\n  };\n\n  const TOTAL_QUESTIONS = 60; \n\nfunction Medium(): JSX.Element {\n    const[questions,setQuestions] = useState(store.getState().questionsState.questions);\n    const [loading, setLoading] = useState(false);\n    const [number, setNumber] = useState(0);\n    const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n    const [score, setScore] = useState(0);\n    const [gameOver, setGameOver] = useState(true);\n    const[finalScore,setFinalScore] = useState(0);\n    \n    const fetchQuestionsMedium = async()=>{\n        setLoading(true);\n        setGameOver(false);\n            const response = await axios.get<QuestionModel[]>(globals.urls.questions+\"q/m\");\n            store.dispatch(QuestionsDownloadedAction(response.data));\n            setQuestions(shuffleArray(response.data));\n            setScore(0);\n            setFinalScore(0);\n            setUserAnswers([]);\n            setNumber(0);\n            setLoading(false);\n    };\n\n  const checkAnswer=(e:any)=>{\n      if (!gameOver) {\n          const answer = e.currentTarget.value;\n          const correct = questions[number]?.answer === answer;\n          if (correct) setScore((prev) => prev + 1);\n          const answerObject = {\n            question: questions[number]?.question,\n            answer,\n            correct,\n            correctAnswer: questions[number]?.answer,\n          };\n          setUserAnswers((prev) => [...prev, answerObject]);\n        }\n  };\n\n\n  const nextQuestion=()=>{\n    const nextQ = number+1;\n\n      if (nextQ === TOTAL_QUESTIONS) {\n        setGameOver(true);\n        setFinalScore(score);  \n      } else {\n        setNumber(nextQ);\n      }\n  }\n\n\n    return (\n        <div className =\"Easy\">\n          <div className=\"Wrapper\">\n          {gameOver &&finalScore===0 ? (\n              <>\n              <h1>FULLSTACK QUIZ</h1>\n              <span id=\"span2\">(Medium-60)</span>\n              <span id=\"span11\">click play to get started!</span>\n                <button className='myButton start' onClick={fetchQuestionsMedium}>\n                ▶\n                </button>\n              </>\n              ) : null}\n\n            {gameOver&&finalScore!==0&&(\n                <>\n                  <div className=\"bluring\"><span id=\"finalScore\">Your final is score is <br /><span id=\"reddish\">{score}/60</span>  <br /> Try again!</span></div>\n                  <button className='myButton start' onClick={fetchQuestionsMedium}>\n                  retry\n                  </button>\n                </>\n              )}\n\n              {loading&&\n                <div>\n                  <EmptyView msg=\"Loading questions..\"/>\n                </div>\n              }\n\n              {!gameOver ? <p className='score'>Score: {score}</p> : null}\n\n              {!loading && !gameOver && (\n\n                      <QuestionCard \n                        question={questions[number]?.question}\n                        userAnswer={userAnswers ? userAnswers[number] : undefined}\n                        questionNr={number+1} \n                        totalQuestions={TOTAL_QUESTIONS}\n                        answers={shuffleArray(questions[number]?.options)}\n                        callback={checkAnswer}/>\n                      )}      \n\n            {!gameOver && !loading && userAnswers.length === number +1 && number+1 !== TOTAL_QUESTIONS  ? (\n                    <button className='next' onClick={nextQuestion}>\n                      Next Question\n                    </button>\n                ) :  !gameOver && !loading && number+1 == TOTAL_QUESTIONS \n                ? ( <button className='next' onClick={nextQuestion}>\n                        Finish\n                    </button>\n                ):null\n            } \n      </div>\n    </div>\n    );\n}\n\n\nexport default Medium;\n","import \"./QuestionsLinks.css\";\n\nfunction QuestionsLinks(): JSX.Element {\n    return (\n        <div className=\"QuestionsLinks\">\n\n            <h1 id=\"niceTitle\">Links</h1>\n            <h1 id=\"niceTitle2\">Here is a list of all the questions+answers source links </h1>\n            <h1 id=\"niceTitle2\">just click on the name!!</h1> \n\t\t\t<table>\n                  <thead>\n                      <tr> \n                        <th>Name</th>\n                      </tr>\n                  </thead>\n            <tbody>\n            \n                    <tr id=\"java\">\n                        <td id=\"idLinks\"><a href=\"https://www.examtiger.com/mcq/java-programming-questions-answers/\" target=\"__blank\" rel=\"noreferrer\">Java questions+answers </a> </td>\n                    </tr>\n\n                    <tr id=\"java\">\n                        <td id=\"idLinks\"><a href=\"https://www.javatpoint.com/java-mcq\" target=\"__blank\" rel=\"noreferrer\">Java questions+answers 2</a></td>\n                    </tr>\n\n                    <tr id=\"java\">\n                        <td id=\"idLinks\"><a href=\"https://www.javamadesoeasy.com/2015/10/threadmulti-threading-quiz-in-java-mcq.html\" target=\"__blank\" rel=\"noreferrer\">Java threads questions+answers</a> </td>\n                    </tr>\n\n                    <tr id=\"spring\">\n                        <td id=\"idLinks\"><a href=\"https://tutorialslink.com/mcq-quiz/java-spring-and-spring-boot-mcq-quiz-multiple-choice-questions-and-answers?page=1\" target=\"__blank\" rel=\"noreferrer\">Spring questions+answers </a></td>\n                    </tr>\n\n                    <tr id=\"spring\">\n                        <td id=\"idLinks\"><a href=\"https://www.tutorialspoint.com/spring/spring_online_quiz.htm\" target=\"__blank\" rel=\"noreferrer\">Spring questions+answers 2</a></td>\n                    </tr>\n\n                    <tr id=\"spring\">\n                        <td id=\"idLinks\"><a href=\"https://www.interviewmocks.com/spring-mcq/\" target=\"__blank\" rel=\"noreferrer\">Spring questions+answers 3</a></td>\n                    </tr>\n\n                    <tr id=\"spring\">\n                        <td id=\"idLinks\"><a href=\"https://www.sanfoundry.com/1000-spring-questions-answers/#spring-web-flow-spring-mvc-spring-rest-spring-flex\" target=\"__blank\" rel=\"noreferrer\">Spring MVC questions+answers</a></td>\n                    </tr>\n                    \n                    <tr id=\"web\">\n                        <td id=\"idLinks\"><a href=\"http://www.allindiaexams.in/engineering/cse/typescript-mcq-quiz-typescript-online-test\" target=\"__blank\" rel=\"noreferrer\">TypeScript questions+answers</a></td>\n                    </tr>\n\n                    <tr id=\"web\">\n                        <td id=\"idLinks\"> <a href=\"https://www.javatpoint.com/reactjs-mcq\" target=\"__blank\" rel=\"noreferrer\">React Js questions+answers</a></td>\n                    </tr>\n            </tbody>\n          </table>\n        </div>\n    );\n}\n\nexport default QuestionsLinks;\n","import { Notyf } from \"notyf\";\r\n\r\nclass Notify{\r\n    private notification = new Notyf({duration:2000, position:{x:\"left\",y:\"top\"}});\r\n    public success(message: string){\r\n        this.notification.success(message);\r\n    };\r\n};\r\n\r\nconst notify = new Notify();\r\n\r\nexport default notify;","import \"./SendIdeas.css\";\nimport emailjs from \"emailjs-com\";\nimport { useHistory } from \"react-router\";\nimport notify from \"../../../Services/Notification\";\nimport { useForm } from \"react-hook-form\";\n\nfunction SendIdeas(): JSX.Element {\n\n    const {register, handleSubmit, formState: { errors }} = useForm();\n\n    const history = useHistory();\n\n    function sendEmail(e:any) {\n\n            emailjs.sendForm('service_6h66g8s', 'my-template'\n            , e.target, 'user_2yCwRHQGK7r7v89rC1FRK')\n                .then((result) => {\n                    console.log(result.text);\n                }, (error) => {\n                    console.log(error.text);\n                });\n                e.target.reset();\n                notify.success(\"your ideas were sent successfully , thanks!\");\n                history.push(\"/home\");\n    }\n\n    return (\n        <div className=\"SendIdeas\">\n            <h1 id=\"niceTitle\">Send me an Email</h1>\n\t\t\t <div className=\"customCont \">\n            <form onSubmit={sendEmail}>\n                    <div className=\"row pt-5 mx-auto\">\n\n                        <div className=\"col-8 form-group mx-auto\">\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Name\" name=\"name\" \n                            {...register(\"name\",{\n                                required: true, \n                                minLength:2})}/>\n                                 <br />\n                            {errors.name?.type==='required' && <span id=\"errors\">missing name</span>}\n                            {errors.name?.type==='minLength' && <span id=\"errors\">name is too short</span>}\n                        </div>\n\n                        <div className=\"col-8 form-group pt-2 mx-auto\">\n                            <input type=\"email\" className=\"form-control\" placeholder=\"Email Address\" name=\"email\"\n                            {...register(\"email\",{\n                                required: true, \n                                minLength:2})}/>\n                                 <br />\n                            {errors.email?.type==='required' && <span id=\"errors\">missing email</span>}\n                            {errors.email?.type==='minLength' && <span id=\"errors\">email is too short</span>}\n                        </div>\n\n                        <div className=\"col-8 form-group pt-2 mx-auto\">\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Subject\" name=\"subject\"{...register(\"subject\",{\n                                required: true, \n                                minLength:2})}/>\n                                 <br />\n                            {errors.subject?.type==='required' && <span id=\"errors\">missing subject</span>}\n                            {errors.subject?.type==='minLength' && <span id=\"errors\">subject is too short</span>}\n                        </div>\n\n                        <div id=\"blackk\" className=\"col-8 form-group pt-2 mx-auto \">\n                            <textarea className=\"form-control\" id=\"\" cols={30} rows={8} placeholder=\"Your message\" name=\"message\"{...register(\"message\",{\n                                required: true, \n                                minLength:10})}/>\n                                <br />\n                            {errors.subject?.type==='required' && <span id=\"errors\">missing message</span>}\n                            {errors.subject?.type==='minLength' && <span id=\"errors\">message is too short</span>}\n                        </div>\n                        <div className=\"col-8 pt-3 mx-auto\">\n                            <button type=\"submit\" className=\"btn btn\" >Send Message</button>\n                        </div>\n                    </div>\n                  </form>\n                <button id=\"btnnn\" onClick={()=> history.push(\"/home\")}>↩</button>\n            </div>\n        </div>\n    );\n}\n\nexport default SendIdeas;\n","import { Redirect, Route, Switch } from \"react-router-dom\";\nimport About from \"../../SharedArea/About/About\";\nimport Level from \"../Levels/Level/Level\";\nimport Home from \"../Home/Home\";\nimport Easy from \"../Play/Easy/Easy\";\nimport Hard from \"../Play/Hard/Hard\";\nimport Medium from \"../Play/Medium/Medium\";\nimport QuestionsLinks from \"../QuestionsLinks/QuestionsLinks\";\nimport SendIdeas from \"../SendIdeas/SendIdeas\";\n\nfunction Routing(): JSX.Element {\n    return (\n        <div className=\"Routing\">\n\t\t\t <Switch>\n\n             <Route path = '/home' component={Home} exact/>\n             <Route path = '/about' component={About} exact/>\n             <Route path = '/level' component={Level} exact/>\n             <Route path = '/easy' component={Easy} exact/>\n             <Route path = '/medium' component={Medium} exact/>\n             <Route path = '/hard' component={Hard} exact/>\n             <Route path = '/questions' component={QuestionsLinks} exact/>\n             <Route path = '/sendIdeas' component={SendIdeas} exact/>\n                \n            <Redirect from='/' to='home' exact/>\n            <Redirect from='' to='home' exact/>\n            <Redirect from='/*' to='home' exact/>\n            </Switch>\n        </div>\n    );\n}\n\nexport default Routing;\n","import ParticlesBg from \"particles-bg\";\nimport { HashRouter } from \"react-router-dom\";\nimport Header from \"../HeaderArea/Header/Header\";\nimport Routing from \"../MainArea/Routing/Routing\";\nimport \"./Layout.css\";\n\nfunction Layout(): JSX.Element {\n    return (\n      <HashRouter>\n\n          <section>\n\n            <ParticlesBg type=\"thick\" bg={true} />\n\n              <header>\n\t\t\t    <Header />\n              </header>\n    \n              <main>\n                <Routing/>\n              </main>\n\n          </section>\n\n      </HashRouter>\n    );\n}\n\nexport default Layout;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport Layout from './Components/Layout/Layout';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Layout/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}